在數位邏輯中，邏輯算符互斥或閘（exclusive or）是對兩個運算元的一種邏輯分析類型。與一般的邏輯或不同，當兩兩數值相同為否，而數值不同時為真。
對於命題



p
,
q


{\displaystyle p,q}

，



p


{\displaystyle p}

互斥或



q


{\displaystyle q}

通常記作



p
XOR
⁡
q


{\displaystyle p\operatorname {XOR} q}

或



p
⊕
q


{\displaystyle p\oplus q}

。在程式語言中，常寫作p ^ q。
互斥或運算



p
⊕
q


{\displaystyle p\oplus q}

的真值表如下：
無論怎樣改變同一行中



p
,
q
,
⊕


{\displaystyle p,q,\oplus }

的位置，真值表都是成立的。
在數學和工程學中，常常用其他的邏輯運算子來表示互斥或算符。互斥或算符可以被其他邏輯算符表示為：
另外，互斥或算符可以被推廣，得到關於n個運算元的互斥或運算：n個運算元的n維互斥或的值為真若且唯若其中值為真的運算元有奇數個。
互斥或也可以被表示為：
互斥或還可以看作是邏輯等價關係的非運算。
交換律：



p
⊕
q
=
q
⊕
p


{\displaystyle p\oplus q=q\oplus p}


結合律：



p
⊕
(
q
⊕
r
)
=
(
p
⊕
q
)
⊕
r


{\displaystyle p\oplus (q\oplus r)=(p\oplus q)\oplus r}


恆等律：



p
⊕
0
=
p


{\displaystyle p\oplus 0=p}


歸零律：



p
⊕
p
=
0


{\displaystyle p\oplus p=0}


自反：



p
⊕
q
⊕
q
=
p
⊕
0
=
p


{\displaystyle p\oplus q\oplus q=p\oplus 0=p}


儘管算子



∧


{\displaystyle \wedge }

（邏輯合取）與



∨


{\displaystyle \lor }

（邏輯析取）是邏輯系統中最為常見的算子，但結構上，系統



(
{
T
,
F
}
,
∧
)


{\displaystyle (\{T,F\},\wedge )}

 and 



(
{
T
,
F
}
,
∨
)


{\displaystyle (\{T,F\},\lor )}

只是么半群。因此，這兩個系統無法合成為一個更大的結構，比如環或半環。
但是，帶有邏輯互斥或的系統



(
{
T
,
F
}
,
⊕
)


{\displaystyle (\{T,F\},\oplus )}

是一個交換群。因此，算子



∧


{\displaystyle \wedge }

與



⊕


{\displaystyle \oplus }

的結合在集合



{
T
,
F
}


{\displaystyle \{T,F\}}

上作用就產生了最基本的二元域




F

2




{\displaystyle F_{2}}

。這個域可以得出所有運用



(
∧
,
∨
)


{\displaystyle (\land ,\lor )}

可以得到的結果，並且由於附帶了域的結構，可以進行代數上的進一步分析。
